package com.leetcode.quiz;

import java.util.Arrays;

/**
 * 949. 给定数字能组成的最大时间
 * <p>
 * 给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。
 * <p>
 * 24 小时格式为 "HH:MM" ，其中 HH 在 00 到 23 之间，MM 在 00 到 59 之间。最小的 24 小时制时间是00:00 ，而最大的是23:59 。从 00:00 （午夜）开始算起，过得越久，时间越大。
 * <p>
 * 以长度为 5 的字符串，按 "HH:MM" 格式返回答案。如果不能确定有效时间，则返回空字符串。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：arr = [1,2,3,4]
 * 输出："23:41"
 * 解释：有效的 24 小时制时间是 "12:34"，"12:43"，"13:24"，"13:42"，"14:23"，"14:32"，"21:34"，"21:43"，"23:14" 和 "23:41" 。这些时间中，"23:41" 是最大时间。
 * <p>
 * 示例 2：
 * <p>
 * 输入：arr = [5,5,5,5]
 * 输出：""
 * 解释：不存在有效的 24 小时制时间，因为 "55:55" 无效。
 * <p>
 * 示例 3：
 * <p>
 * 输入：arr = [0,0,0,0]
 * 输出："00:00"
 * 示例 4：
 * <p>
 * 输入：arr = [0,0,1,0]
 * 输出："10:00"
 * <p>
 * <p>
 * 提示：
 * <p>
 * arr.length == 4
 * 0 <= arr[i] <= 9
 * <p>
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/largest-time-for-given-digits
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Problem949 {

    public static void main(String... args) {
//        int[] array = {1, 2, 3, 4};
//        int[] array = {5, 5, 5, 5};
//        int[] array = {0, 0, 0, 0};
//        int[] array = {0, 0, 1, 0};
        int[] array = {2, 0, 0, 4};

        System.out.println(new Problem949().largestTimeFromDigits(array));
    }

    public String largestTimeFromDigits(int[] arr) {
        int max_h = -1;
        int max_m = -1;
        int[][] allP = {
                {0, 1, 2, 3},
                {0, 1, 3, 2},
                {0, 2, 1, 3},
                {0, 2, 3, 1},
                {0, 3, 1, 2},
                {0, 3, 2, 1},
                {1, 0, 2, 3},
                {1, 0, 3, 2},
                {1, 2, 0, 3},
                {1, 2, 3, 0},
                {1, 3, 0, 2},
                {1, 3, 2, 0},
                {2, 0, 1, 3},
                {2, 0, 3, 1},
                {2, 1, 0, 3},
                {2, 1, 3, 0},
                {2, 3, 0, 1},
                {2, 3, 1, 0},
                {3, 0, 1, 2},
                {3, 0, 2, 1},
                {3, 1, 0, 2},
                {3, 1, 2, 0},
                {3, 2, 0, 1},
                {3, 2, 1, 0}
        };
        int h, m;
        for (int[] p : allP) {
            h = 10 * arr[p[0]] + arr[p[1]];
            m = 10 * arr[p[2]] + arr[p[3]];
            if (h < 24 && m < 60) {
                if (h > max_h || (h == max_h && m > max_m)) {
                    max_h = h;
                    max_m = m;
                }
            }
        }
        if (max_h == -1 || max_m == -1) {
            return "";
        }
        return (max_h < 10 ? "0" : "") + max_h + ":" + (max_m < 10 ? "0" : "") + max_m;
    }
}